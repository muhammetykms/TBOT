# Generated by Django 5.0.4 on 2025-05-04 23:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('destek', '0001_initial'),
        ('indikatorler', '0001_initial'),
        ('mumlar', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcikIslem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coin', models.CharField(max_length=20)),
                ('ilk_alis_fiyati', models.FloatField()),
                ('ortalama_fiyat', models.FloatField()),
                ('toplam_maliyet', models.FloatField()),
                ('toplam_adet', models.FloatField()),
                ('tekrar_sayisi', models.IntegerField(default=1)),
                ('acilis_zamani', models.DateTimeField(auto_now_add=True)),
                ('son_islem_zamani', models.DateTimeField(auto_now=True)),
                ('aktif_mi', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='IslemAdimi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('islem_tipi', models.CharField(choices=[('AL', 'Al'), ('SAT', 'Sat')], max_length=10)),
                ('miktar', models.FloatField(help_text='Adet cinsinden')),
                ('birim_fiyat', models.FloatField(help_text='USDT cinsinden fiyat')),
                ('toplam_usdt', models.FloatField(help_text='Toplam işlem değeri = miktar * birim fiyat')),
                ('islem_zamani', models.DateTimeField(auto_now_add=True)),
                ('parite', models.CharField(help_text='İşlem yapılan parite, örn: BNBUSDT', max_length=20)),
                ('emir_tipi', models.CharField(choices=[('limit', 'Limit'), ('market', 'Market')], default='market', max_length=10)),
                ('acik_islem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='islem_adimlari', to='stratejiler.acikislem')),
            ],
        ),
        migrations.CreateModel(
            name='Strateji',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adi', models.CharField(max_length=100)),
                ('aciklama', models.TextField(blank=True, null=True)),
                ('aktif_mi', models.BooleanField(default=False)),
                ('sistem_aktif_mi', models.BooleanField(default=True, help_text='Sistemde aktif mi?')),
                ('borsa', models.CharField(choices=[('binance', 'Binance'), ('kucoin', 'KuCoin'), ('bybit', 'Bybit')], default='binance', max_length=20)),
                ('cüzdan', models.CharField(default='binance_spot', max_length=50)),
                ('market_tipi', models.CharField(choices=[('spot', 'Spot'), ('futures', 'Futures')], default='spot', max_length=20)),
                ('maksimum_alis_sayisi', models.IntegerField(default=10)),
                ('parite', models.CharField(default='', max_length=50)),
                ('baslangic_butcesi', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('kalan_butce', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('pozisyon_miktari', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('kaldirac', models.IntegerField(default=1)),
                ('maksimum_tetikleme_sayisi', models.IntegerField(default=0)),
                ('suanki_tetikleme_sayisi', models.IntegerField(default=0)),
                ('durum', models.CharField(choices=[('ALIS_BEKLIYOR', 'Alış Bekliyor'), ('ILK_ALIM_YAPILDI', 'İlk Alım Yapıldı'), ('EK_ALIM_YAPILDI', 'Ek Alım Yapıldı'), ('STANDART_SATIM_YAPILDI', 'Standart Satım Yapıldı'), ('ISTISNA_DURUM_SATIM', 'İstisnai Durumda Satım'), ('AFTER_SELL_BEKLEMEDE', 'Satış Sonrası Beklemede'), ('bekleme_hata', 'Hata Nedeniyle Beklemede'), ('KULLANICI_DURDURDU', 'Kullanıcı Tarafından Durduruldu'), ('KAPATILDI', 'Kapatıldı')], default='ALIS_BEKLIYOR', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('kullanici', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='acikislem',
            name='strateji',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratejiler.strateji'),
        ),
        migrations.CreateModel(
            name='StratejiAksiyonu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aksiyon_tipi', models.CharField(choices=[('buy_market', 'Al (Market)'), ('buy_limit', 'Al (Limit)'), ('buy_fok', 'Al (FOK)'), ('sell_market', 'Sat (Market)'), ('sell_limit', 'Sat (Limit)'), ('sell_fok', 'Sat (FOK)'), ('cancel_orders_spot', 'Mevcut Emirleri İptal Et'), ('open_long', 'Long Pozisyon Aç'), ('open_short', 'Short Pozisyon Aç'), ('close_long', 'Long Pozisyon Kapat'), ('close_short', 'Short Pozisyon Kapat'), ('hedge_open', 'Ters Pozisyon Aç'), ('switch_position', 'Pozisyon Yönünü Değiştir'), ('move_stop', 'Stop Seviyesini Taşı'), ('cancel_orders_futures', 'Mevcut Emirleri İptal Et'), ('tp_limit', 'Take Profit (Limit)'), ('tp_market', 'Take Profit (Market)'), ('sl_limit', 'Stop Loss (Limit)'), ('sl_market', 'Stop Loss (Market)'), ('trailing_stop', 'İz Süren Stop'), ('set_trail', 'İz Sürmeyi Başlat'), ('step_sell', 'Kademeli Satış'), ('step_buy', 'Kademeli Alış'), ('close_partial', 'Pozisyonun Bir Kısmını Kapat'), ('dynamic_size', 'Dinamik Alım Miktarı'), ('wait', 'Bekle'), ('wait_for_time', 'Zamana Göre Bekle'), ('wait_for_signal', 'Koşula Göre Bekle'), ('notify', 'Bildirim Gönder')], max_length=30)),
                ('coin', models.CharField(default='USDT', max_length=10)),
                ('miktar', models.DecimalField(decimal_places=8, max_digits=20)),
                ('miktar_tipi', models.CharField(choices=[('yuzde', 'Yüzde'), ('sabit', 'Sabit')], default='yuzde', max_length=10)),
                ('emir_tipi', models.CharField(choices=[('market', 'Market'), ('limit', 'Limit'), ('fok', 'Fill or Kill'), ('ioc', 'Immediate or Cancel')], default='market', max_length=20)),
                ('limit_fiyat', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('kaldirac', models.PositiveIntegerField(blank=True, null=True)),
                ('pozisyon_yonu', models.CharField(blank=True, choices=[('long', 'Long'), ('short', 'Short')], max_length=10, null=True)),
                ('reduce_only', models.BooleanField(default=False)),
                ('sira', models.PositiveSmallIntegerField(default=0)),
                ('olusturulma_zamani', models.DateTimeField(auto_now_add=True)),
                ('strateji', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aksiyonlar', to='stratejiler.strateji')),
            ],
            options={
                'ordering': ['sira'],
            },
        ),
        migrations.CreateModel(
            name='StratejiAlisOrani',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('siralama', models.IntegerField()),
                ('oran', models.DecimalField(decimal_places=8, max_digits=20)),
                ('tip', models.CharField(choices=[('yuzde', 'Yüzde (%)'), ('sabit', 'Sabit Tutar')], default='yuzde', max_length=10)),
                ('sabit_tip', models.CharField(blank=True, choices=[('usdt', 'USDT Tutarı'), ('coin', 'Coin Miktarı')], max_length=10, null=True)),
                ('strateji', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alis_oranlari', to='stratejiler.strateji')),
            ],
            options={
                'ordering': ['siralama'],
            },
        ),
        migrations.CreateModel(
            name='StratejiKosullari',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ifade', models.TextField(help_text='Koşulun ifade olarak tanımlanması. Örneğin, EMA(20) > EMA(50).')),
                ('sira', models.PositiveIntegerField(default=0, help_text='Koşulların sıralaması.')),
                ('islem_operator', models.ForeignKey(blank=True, help_text='Bu koşul hangi işlem türü için geçerli? Örn: BUY (Alış), SELL (Satış), HOLD (Bekle).', limit_choices_to={'op_grubu': 'islem'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='islem_operatorleri', to='destek.operatorler', verbose_name='İşlem Operatörü')),
                ('karsilastirma_operator', models.ForeignKey(help_text='Bu koşul için kullanılacak karşılaştırma operatörü. Örn: EQ (Eşittir), LT (Küçüktür), GT (Büyüktür).', limit_choices_to={'op_grubu': 'karsilastirma'}, on_delete=django.db.models.deletion.CASCADE, related_name='kosullari', to='destek.operatorler', verbose_name='Karşılaştırma Operatörü')),
                ('strateji', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kosullar', to='stratejiler.strateji')),
            ],
        ),
        migrations.CreateModel(
            name='StratejiKosulIndikator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indikator_sirasi', models.CharField(choices=[('ilk', 'İlk'), ('ikinci', 'İkinci')], default='ilk', help_text='Bu parametrenin ilk veya ikinci indikatöre mi ait olduğunu belirtir.', max_length=10, verbose_name='İndikatör Sırası')),
                ('indikator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indikator_kosullar', to='indikatorler.indikatorler')),
                ('indikator_ciktisi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indikator_cikti_kosullar', to='indikatorler.indikatorciktilari')),
                ('parite_interval_market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kosul_indikatorleri', to='mumlar.pariteintervalmarket')),
                ('strateji_kosulu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kosul_indikatorleri', to='stratejiler.stratejikosullari')),
            ],
        ),
        migrations.CreateModel(
            name='StratejiKosulBaglantilari',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mantiksal_operator', models.ForeignKey(help_text='Bu koşullar nasıl bağlanacak? Örn: AND, OR.', limit_choices_to={'op_grubu': 'mantiksal'}, on_delete=django.db.models.deletion.CASCADE, to='destek.operatorler', verbose_name='Mantıksal Operatör')),
                ('kosullar', models.ManyToManyField(help_text='Birden fazla koşulu AND veya OR ile bağlamak için kullanılır.', related_name='baglantilar', to='stratejiler.stratejikosullari')),
            ],
        ),
        migrations.CreateModel(
            name='StratejiIstisnalari',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aksiyon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='istisnalar', to='stratejiler.stratejiaksiyonu')),
                ('mantiksal_operator', models.ForeignKey(help_text='Bu koşul aksiyonun yapılmaması için ne şekilde bağlanacak? Örn: AND, OR', limit_choices_to={'op_grubu': 'mantiksal'}, on_delete=django.db.models.deletion.CASCADE, to='destek.operatorler')),
                ('kosul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratejiler.stratejikosullari')),
            ],
        ),
        migrations.CreateModel(
            name='StratejiBeklemeKosulu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aciklama', models.TextField(blank=True, null=True)),
                ('strateji', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bekleme_kosullari', to='stratejiler.strateji')),
                ('bitis_kosulu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bitiren_kosul', to='stratejiler.stratejikosullari')),
                ('kosul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratejiler.stratejikosullari')),
            ],
        ),
        migrations.CreateModel(
            name='StratejiKosulParametreleri',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kullanici_degeri', models.FloatField(blank=True, help_text='Kullanıcı tarafından belirlenen değer.', null=True)),
                ('indikator_parametre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strateji_kosul_parametreleri', to='indikatorler.indikatorparametreleri')),
                ('kosul_indikator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kosul_parametreleri', to='stratejiler.stratejikosulindikator')),
            ],
        ),
        migrations.CreateModel(
            name='StratejiZamanlama',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baslangic_saati', models.TimeField(blank=True, help_text='Strateji bu saatten önce çalışmaz', null=True)),
                ('bitis_saati', models.TimeField(blank=True, help_text='Strateji bu saatten sonra çalışmaz', null=True)),
                ('sadece_hafta_ici', models.BooleanField(default=False, help_text='Hafta sonları devre dışı bırak')),
                ('aktif_baslangic_tarihi', models.DateField(blank=True, help_text='Strateji sadece bu tarihten itibaren aktif olur', null=True)),
                ('aktif_bitis_tarihi', models.DateField(blank=True, help_text='Bu tarihten sonra strateji devre dışı kalır', null=True)),
                ('tekrar_araligi_dakika', models.PositiveIntegerField(default=0, help_text='Strateji her kaç dakikada bir tetiklensin? (0 = her an kontrol et)')),
                ('strateji', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='zamanlama', to='stratejiler.strateji')),
            ],
        ),
    ]
